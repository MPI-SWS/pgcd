    lex.py: 924:lex: tokens   = ('DEF', 'END', 'IN', 'SIN', 'TAN', 'COS', 'ABS', 'SQRT', 'ID', 'ICONST', 'DCONST', 'SCONST', 'BCONST', 'ARROW', 'PLUS', 'MINUS', 'TIMES', 'DIVIDE', 'MOD', 'OR', 'AND', 'NOT', 'LT', 'LE', 'GT', 'GE', 'EQ', 'NE', 'EQUALS', 'LPAREN', 'RPAREN', 'LSQUARE', 'RSQUARE', 'COMMA', 'SEMI', 'COLON', 'DOT')
    lex.py: 925:lex: literals = ''
    lex.py: 926:lex: states   = {'INITIAL': 'inclusive'}
    lex.py: 953:lex: Adding rule t_NEWLINE -> '\n+' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_ID -> '[A-Za-z_][\w_]*' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_DCONST -> '\d+\.\d+' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_ICONST -> '\d+' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_SCONST -> '\"([^\\\n]|(\\.))*?\"' (state 'INITIAL')
    lex.py: 953:lex: Adding rule t_comment -> '\#.*\n' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_OR -> '\|\|' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_AND -> '&&' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_ARROW -> '->' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DOT -> '\.' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_EQ -> '==' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GE -> '>=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LE -> '<=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LPAREN -> '\(' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LSQUARE -> '\[' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NE -> '!=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_PLUS -> '\+' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RPAREN -> '\)' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_RSQUARE -> '\]' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_TIMES -> '\*' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_COLON -> ':' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_COMMA -> ',' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_DIVIDE -> '/' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_EQUALS -> '=' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_GT -> '>' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_LT -> '<' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MINUS -> '-' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_MOD -> '%' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_NOT -> '!' (state 'INITIAL')
    lex.py: 959:lex: Adding rule t_SEMI -> ';' (state 'INITIAL')
    lex.py: 966:lex: ==== MASTER REGEXS FOLLOW ====
    lex.py: 975:lex: state 'INITIAL' : regex[0] = '(?P<t_NEWLINE>\n+)|(?P<t_ID>[A-Za-z_][\w_]*)|(?P<t_DCONST>\d+\.\d+)|(?P<t_ICONST>\d+)|(?P<t_SCONST>\"([^\\\n]|(\\.))*?\")|(?P<t_comment>\#.*\n)|(?P<t_OR>\|\|)|(?P<t_AND>&&)|(?P<t_ARROW>->)|(?P<t_DOT>\.)|(?P<t_EQ>==)|(?P<t_GE>>=)|(?P<t_LE><=)|(?P<t_LPAREN>\()|(?P<t_LSQUARE>\[)|(?P<t_NE>!=)|(?P<t_PLUS>\+)|(?P<t_RPAREN>\))|(?P<t_RSQUARE>\])|(?P<t_TIMES>\*)|(?P<t_COLON>:)|(?P<t_COMMA>,)|(?P<t_DIVIDE>/)|(?P<t_EQUALS>=)|(?P<t_GT>>)|(?P<t_LT><)|(?P<t_MINUS>-)|(?P<t_MOD>%)|(?P<t_NOT>!)|(?P<t_SEMI>;)'
