
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORLTLEGTGEEQNErightNOTleftPLUSMINUSleftTIMESDIVIDEMODleftPOWrightUMINUSSINTANCOSABSSQRTABS AND ARROW BCONST COLON COMMA COS DCONST DEF DIVIDE DOT END EQ EQUALS GE GT ICONST ID IN LE LPAREN LSQUARE LT MINUS MOD NE NOT OR PLUS POW RPAREN RSQUARE SCONST SEMI SIN SQRT TAN TIMES choreography : ID EQUALS DEF statement IN LSQUARE expression RSQUARE ID  statement : statement statement\n                      | message\n                      | motion\n                      | guard\n                      | merge\n                      | fork\n                      | join\n                      | end message : ID EQUALS ID ARROW ID COLON ID msgarg SEMI ID msgarg : LPAREN exp RPAREN\n                   | LPAREN RPAREN exp : exp COMMA exp\n                | expressionmotion : ID EQUALS LPAREN mspecs RPAREN SEMI ID mspecs : mspecs COMMA mspecs\n                   | ID COLON ID LPAREN funcargs RPAREN  funcargs : expression COMMA funcargs\n                     | expression\n                     |  guard   : ID EQUALS LSQUARE expression RSQUARE ID PLUS gargs  gargs : LSQUARE expression RSQUARE ID PLUS gargs\n                  | LSQUARE expression RSQUARE ID  merge : ID PLUS margs EQUALS ID  margs : ID PLUS margs\n                  | ID  fork : ID EQUALS ID OR fargs  fargs : ID OR fargs\n                  | ID  join : ID OR jargs EQUALS ID  jargs : ID OR jargs\n                  | ID  end : ID EQUALS END expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expression\n                  | expression POW expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression GT expression\n                  | expression GE expression\n                  | expression LT expression\n                  | expression LE expression\n                  | expression EQ expression\n                  | expression NE expressionexpression : SIN LPAREN expression RPAREN\n                      | COS LPAREN expression RPAREN\n                      | TAN LPAREN expression RPAREN\n                      | ABS LPAREN expression RPAREN\n                      | SQRT LPAREN expression RPAREN\n                      | ID LPAREN funcargs RPARENexpression : LPAREN expression RPARENexpression : ICONST\n                      | DCONST\n                      | SCONST\n                      | BCONSTexpression : ID\n                      | ID DOT ID\n                      | NOT expression\n                      | MINUS expression %prec UMINUS'
    
_lr_action_items = {'ID':([0,4,6,7,8,9,10,11,12,13,14,15,16,17,20,21,22,27,28,29,34,36,45,46,47,48,49,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,79,80,83,85,86,87,88,90,118,119,120,122,130,133,134,135,141,143,144,146,148,],[2,5,5,-3,-4,-5,-6,-7,-8,-9,19,23,25,5,30,32,-33,32,51,52,32,32,32,23,83,25,85,-29,-27,89,30,32,94,95,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-24,-30,116,117,52,120,-28,32,-15,32,32,32,-21,141,-10,32,146,-23,-22,]),'$end':([1,116,],[0,-1,]),'EQUALS':([2,5,23,24,25,26,82,84,],[3,14,-26,47,-32,49,-25,-31,]),'DEF':([3,],[4,]),'PLUS':([5,23,32,33,41,42,43,44,50,74,76,81,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,124,125,126,127,128,138,140,146,],[15,46,-59,60,-55,-56,-57,-58,60,-62,60,60,60,-60,123,-34,-35,-36,-37,-38,-39,60,60,60,60,60,60,60,60,60,-54,60,60,60,60,-53,-48,-49,-50,-51,-52,60,60,147,]),'OR':([5,19,25,32,33,41,42,43,44,50,52,74,76,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,124,125,126,127,128,138,140,],[16,29,48,-59,67,-55,-56,-57,-58,67,88,-62,67,-61,67,-60,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,67,-54,67,67,67,67,-53,-48,-49,-50,-51,-52,67,67,]),'IN':([6,7,8,9,10,11,12,13,17,22,52,53,83,85,118,120,134,141,146,148,],[18,-3,-4,-5,-6,-7,-8,-9,-2,-33,-29,-27,-24,-30,-28,-15,-21,-10,-23,-22,]),'LPAREN':([14,21,27,32,34,35,36,37,38,39,40,45,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,79,80,89,117,119,122,130,133,143,],[20,36,36,57,36,75,36,77,78,79,80,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,119,130,36,36,36,36,36,]),'LSQUARE':([14,18,123,147,],[21,27,133,133,]),'END':([14,],[22,]),'ARROW':([19,],[28,]),'SIN':([21,27,34,36,45,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,79,80,119,122,130,133,143,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'COS':([21,27,34,36,45,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,79,80,119,122,130,133,143,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'TAN':([21,27,34,36,45,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,79,80,119,122,130,133,143,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'ABS':([21,27,34,36,45,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,79,80,119,122,130,133,143,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'SQRT':([21,27,34,36,45,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,79,80,119,122,130,133,143,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'ICONST':([21,27,34,36,45,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,79,80,119,122,130,133,143,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'DCONST':([21,27,34,36,45,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,79,80,119,122,130,133,143,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'SCONST':([21,27,34,36,45,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,79,80,119,122,130,133,143,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'BCONST':([21,27,34,36,45,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,79,80,119,122,130,133,143,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'NOT':([21,27,34,36,45,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,79,80,119,122,130,133,143,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'MINUS':([21,27,32,33,34,36,41,42,43,44,45,50,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,122,124,125,126,127,128,130,133,138,140,143,],[34,34,-59,61,34,34,-55,-56,-57,-58,34,61,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-62,34,61,34,34,34,34,61,61,-60,-34,-35,-36,-37,-38,-39,61,61,61,61,61,61,61,61,61,-54,61,61,61,61,34,-53,34,-48,-49,-50,-51,-52,34,34,61,61,34,]),'COLON':([30,51,],[54,87,]),'RPAREN':([31,32,41,42,43,44,57,74,76,81,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,122,124,125,126,127,128,130,131,132,136,138,139,145,],[55,-59,-55,-56,-57,-58,-20,-62,111,-61,-16,121,-19,-60,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,124,-54,125,126,127,128,-20,-53,-20,-48,-49,-50,-51,-52,137,139,-18,142,-14,-17,-13,]),'COMMA':([31,32,41,42,43,44,74,81,91,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,121,124,125,126,127,128,136,138,139,145,],[56,-59,-55,-56,-57,-58,-62,-61,56,122,-60,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-54,-53,-48,-49,-50,-51,-52,143,-14,-17,143,]),'RSQUARE':([32,33,41,42,43,44,50,74,81,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,121,124,125,126,127,128,140,],[-59,59,-55,-56,-57,-58,86,-62,-61,-60,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-54,-53,-48,-49,-50,-51,-52,144,]),'TIMES':([32,33,41,42,43,44,50,74,76,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,124,125,126,127,128,138,140,],[-59,62,-55,-56,-57,-58,62,-62,62,62,62,-60,62,62,-36,-37,-38,-39,62,62,62,62,62,62,62,62,62,-54,62,62,62,62,-53,-48,-49,-50,-51,-52,62,62,]),'DIVIDE':([32,33,41,42,43,44,50,74,76,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,124,125,126,127,128,138,140,],[-59,63,-55,-56,-57,-58,63,-62,63,63,63,-60,63,63,-36,-37,-38,-39,63,63,63,63,63,63,63,63,63,-54,63,63,63,63,-53,-48,-49,-50,-51,-52,63,63,]),'MOD':([32,33,41,42,43,44,50,74,76,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,124,125,126,127,128,138,140,],[-59,64,-55,-56,-57,-58,64,-62,64,64,64,-60,64,64,-36,-37,-38,-39,64,64,64,64,64,64,64,64,64,-54,64,64,64,64,-53,-48,-49,-50,-51,-52,64,64,]),'POW':([32,33,41,42,43,44,50,74,76,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,124,125,126,127,128,138,140,],[-59,65,-55,-56,-57,-58,65,-62,65,65,65,-60,65,65,65,65,65,-39,65,65,65,65,65,65,65,65,65,-54,65,65,65,65,-53,-48,-49,-50,-51,-52,65,65,]),'AND':([32,33,41,42,43,44,50,74,76,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,124,125,126,127,128,138,140,],[-59,66,-55,-56,-57,-58,66,-62,66,-61,66,-60,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,66,-54,66,66,66,66,-53,-48,-49,-50,-51,-52,66,66,]),'GT':([32,33,41,42,43,44,50,74,76,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,124,125,126,127,128,138,140,],[-59,68,-55,-56,-57,-58,68,-62,68,-61,68,-60,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,68,-54,68,68,68,68,-53,-48,-49,-50,-51,-52,68,68,]),'GE':([32,33,41,42,43,44,50,74,76,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,124,125,126,127,128,138,140,],[-59,69,-55,-56,-57,-58,69,-62,69,-61,69,-60,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,69,-54,69,69,69,69,-53,-48,-49,-50,-51,-52,69,69,]),'LT':([32,33,41,42,43,44,50,74,76,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,124,125,126,127,128,138,140,],[-59,70,-55,-56,-57,-58,70,-62,70,-61,70,-60,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,70,-54,70,70,70,70,-53,-48,-49,-50,-51,-52,70,70,]),'LE':([32,33,41,42,43,44,50,74,76,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,124,125,126,127,128,138,140,],[-59,71,-55,-56,-57,-58,71,-62,71,-61,71,-60,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,71,-54,71,71,71,71,-53,-48,-49,-50,-51,-52,71,71,]),'EQ':([32,33,41,42,43,44,50,74,76,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,124,125,126,127,128,138,140,],[-59,72,-55,-56,-57,-58,72,-62,72,-61,72,-60,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,72,-54,72,72,72,72,-53,-48,-49,-50,-51,-52,72,72,]),'NE':([32,33,41,42,43,44,50,74,76,81,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,124,125,126,127,128,138,140,],[-59,73,-55,-56,-57,-58,73,-62,73,-61,73,-60,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,73,-54,73,73,73,73,-53,-48,-49,-50,-51,-52,73,73,]),'DOT':([32,],[58,]),'SEMI':([55,129,137,142,],[90,135,-12,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'choreography':([0,],[1,]),'statement':([4,6,17,],[6,17,17,]),'message':([4,6,17,],[7,7,7,]),'motion':([4,6,17,],[8,8,8,]),'guard':([4,6,17,],[9,9,9,]),'merge':([4,6,17,],[10,10,10,]),'fork':([4,6,17,],[11,11,11,]),'join':([4,6,17,],[12,12,12,]),'end':([4,6,17,],[13,13,13,]),'margs':([15,46,],[24,82,]),'jargs':([16,48,],[26,84,]),'mspecs':([20,56,],[31,91,]),'expression':([21,27,34,36,45,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,78,79,80,119,122,130,133,143,],[33,50,74,76,81,93,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,113,114,115,93,93,138,140,138,]),'fargs':([29,88,],[53,118,]),'funcargs':([57,119,122,],[92,131,132,]),'msgarg':([117,],[129,]),'gargs':([123,147,],[134,148,]),'exp':([130,143,],[136,145,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> choreography","S'",1,None,None,None),
  ('choreography -> ID EQUALS DEF statement IN LSQUARE expression RSQUARE ID','choreography',9,'p_choreography','parser_chor.py',73),
  ('statement -> statement statement','statement',2,'p_statement','parser_chor.py',77),
  ('statement -> message','statement',1,'p_statement','parser_chor.py',78),
  ('statement -> motion','statement',1,'p_statement','parser_chor.py',79),
  ('statement -> guard','statement',1,'p_statement','parser_chor.py',80),
  ('statement -> merge','statement',1,'p_statement','parser_chor.py',81),
  ('statement -> fork','statement',1,'p_statement','parser_chor.py',82),
  ('statement -> join','statement',1,'p_statement','parser_chor.py',83),
  ('statement -> end','statement',1,'p_statement','parser_chor.py',84),
  ('message -> ID EQUALS ID ARROW ID COLON ID msgarg SEMI ID','message',10,'p_message','parser_chor.py',91),
  ('msgarg -> LPAREN exp RPAREN','msgarg',3,'p_msgarg','parser_chor.py',96),
  ('msgarg -> LPAREN RPAREN','msgarg',2,'p_msgarg','parser_chor.py',97),
  ('exp -> exp COMMA exp','exp',3,'p_exp','parser_chor.py',104),
  ('exp -> expression','exp',1,'p_exp','parser_chor.py',105),
  ('motion -> ID EQUALS LPAREN mspecs RPAREN SEMI ID','motion',7,'p_motion','parser_chor.py',112),
  ('mspecs -> mspecs COMMA mspecs','mspecs',3,'p_mspecs','parser_chor.py',117),
  ('mspecs -> ID COLON ID LPAREN funcargs RPAREN','mspecs',6,'p_mspecs','parser_chor.py',118),
  ('funcargs -> expression COMMA funcargs','funcargs',3,'p_funcargs','parser_chor.py',125),
  ('funcargs -> expression','funcargs',1,'p_funcargs','parser_chor.py',126),
  ('funcargs -> <empty>','funcargs',0,'p_funcargs','parser_chor.py',127),
  ('guard -> ID EQUALS LSQUARE expression RSQUARE ID PLUS gargs','guard',8,'p_guard','parser_chor.py',136),
  ('gargs -> LSQUARE expression RSQUARE ID PLUS gargs','gargs',6,'p_gargs','parser_chor.py',141),
  ('gargs -> LSQUARE expression RSQUARE ID','gargs',4,'p_gargs','parser_chor.py',142),
  ('merge -> ID PLUS margs EQUALS ID','merge',5,'p_merge','parser_chor.py',149),
  ('margs -> ID PLUS margs','margs',3,'p_margs','parser_chor.py',154),
  ('margs -> ID','margs',1,'p_margs','parser_chor.py',155),
  ('fork -> ID EQUALS ID OR fargs','fork',5,'p_fork','parser_chor.py',162),
  ('fargs -> ID OR fargs','fargs',3,'p_fargs','parser_chor.py',167),
  ('fargs -> ID','fargs',1,'p_fargs','parser_chor.py',168),
  ('join -> ID OR jargs EQUALS ID','join',5,'p_join','parser_chor.py',175),
  ('jargs -> ID OR jargs','jargs',3,'p_jargs','parser_chor.py',180),
  ('jargs -> ID','jargs',1,'p_jargs','parser_chor.py',181),
  ('end -> ID EQUALS END','end',3,'p_end','parser_chor.py',188),
  ('expression -> expression PLUS expression','expression',3,'p_expression_ft','parser_chor.py',198),
  ('expression -> expression MINUS expression','expression',3,'p_expression_ft','parser_chor.py',199),
  ('expression -> expression TIMES expression','expression',3,'p_expression_ft','parser_chor.py',200),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_ft','parser_chor.py',201),
  ('expression -> expression MOD expression','expression',3,'p_expression_ft','parser_chor.py',202),
  ('expression -> expression POW expression','expression',3,'p_expression_ft','parser_chor.py',203),
  ('expression -> expression AND expression','expression',3,'p_expression_ft','parser_chor.py',204),
  ('expression -> expression OR expression','expression',3,'p_expression_ft','parser_chor.py',205),
  ('expression -> expression GT expression','expression',3,'p_expression_ft','parser_chor.py',206),
  ('expression -> expression GE expression','expression',3,'p_expression_ft','parser_chor.py',207),
  ('expression -> expression LT expression','expression',3,'p_expression_ft','parser_chor.py',208),
  ('expression -> expression LE expression','expression',3,'p_expression_ft','parser_chor.py',209),
  ('expression -> expression EQ expression','expression',3,'p_expression_ft','parser_chor.py',210),
  ('expression -> expression NE expression','expression',3,'p_expression_ft','parser_chor.py',211),
  ('expression -> SIN LPAREN expression RPAREN','expression',4,'p_expression_nd','parser_chor.py',244),
  ('expression -> COS LPAREN expression RPAREN','expression',4,'p_expression_nd','parser_chor.py',245),
  ('expression -> TAN LPAREN expression RPAREN','expression',4,'p_expression_nd','parser_chor.py',246),
  ('expression -> ABS LPAREN expression RPAREN','expression',4,'p_expression_nd','parser_chor.py',247),
  ('expression -> SQRT LPAREN expression RPAREN','expression',4,'p_expression_nd','parser_chor.py',248),
  ('expression -> ID LPAREN funcargs RPAREN','expression',4,'p_expression_nd','parser_chor.py',249),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_rd','parser_chor.py',266),
  ('expression -> ICONST','expression',1,'p_expression_4th','parser_chor.py',270),
  ('expression -> DCONST','expression',1,'p_expression_4th','parser_chor.py',271),
  ('expression -> SCONST','expression',1,'p_expression_4th','parser_chor.py',272),
  ('expression -> BCONST','expression',1,'p_expression_4th','parser_chor.py',273),
  ('expression -> ID','expression',1,'p_expression_5th','parser_chor.py',277),
  ('expression -> ID DOT ID','expression',3,'p_expression_5th','parser_chor.py',278),
  ('expression -> NOT expression','expression',2,'p_expression_5th','parser_chor.py',279),
  ('expression -> MINUS expression','expression',2,'p_expression_5th','parser_chor.py',280),
]
